package data

import (
	"context"
	"crypto/sha256"
	"errors"
	"finalproject/internal/validator"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"golang.org/x/crypto/bcrypt"
	"net/http"
	"time"
)

//	Define a User struct to represent an individual user. Importantly, notice how we are
//
// using the json:"-" struct tag to prevent the Password and Version fields appearing in
// any output when we encode it to JSON. Also notice that the Password field uses the
// custom password type defined below.
// Declare a new AnonymousUser variable.
var AnonymousUser = &User{}

type User struct {
	ID int64 `json:"id"`
	//CreatedAt time.Time `json:"created_at"`
	FirstName   string   `json:"name"`
	LastName    string   `json:"name"`
	PhoneNumber string   `json:"phoneNumber"`
	Email       string   `json:"email"`
	Address     string   `json:"address"`
	ProfilePic  string   `json:"profilePic"`
	Password    password `json:"-"`
	Activated   bool     `json:"activated"`
	Version     int      `json:"-"`
}

// Check if a User instance is the AnonymousUser.
func (u *User) IsAnonymous() bool {
	return u == AnonymousUser
}

// Create a custom password type which is a struct containing the plaintext and hashed
// versions of the password for a user. The plaintext field is a *pointer* to a string,
// so that we're able to distinguish between a plaintext password not being present in
// the struct at all, versus a plaintext password which is the empty string "".
type password struct {
	plaintext *string
	hash      []byte
}

// The Set() method calculates the bcrypt hash of a plaintext password, and stores both
// the hash and the plaintext versions in the struct.
func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}
	p.plaintext = &plaintextPassword
	p.hash = hash
	return nil
}

// Matches () method checks whether the provided plaintext password matches the
// hashed password stored in the struct, returning true if it matches and false
// otherwise.
func (p *password) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}
func ValidateEmail(v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRX), "email", "must be a valid email address")
}
func ValidatePasswordPlaintext(v *validator.Validator, password string) {
	v.Check(password != "", "password", "must be provided")
	v.Check(len(password) >= 8, "password", "must be at least 8 bytes long")
	v.Check(len(password) <= 72, "password", "must not be more than 72 bytes long")
}
func ValidateUser(v *validator.Validator, user *User) {
	v.Check(user.FirstName != "", "name", "must be provided")
	v.Check(len(user.FirstName) <= 500, "name", "must not be more than 500 bytes long")
	v.Check(user.LastName != "", "name", "must be provided")
	v.Check(len(user.LastName) <= 500, "name", "must not be more than 500 bytes long")
	// Call the standalone ValidateEmail() helper.
	ValidateEmail(v, user.Email)
	// If the plaintext password is not nil, call the standalone
	// ValidatePasswordPlaintext() helper.
	if user.Password.plaintext != nil {
		ValidatePasswordPlaintext(v, *user.Password.plaintext)
	}
	// If the password hash is ever nil, this will be due to a logic error in our
	// codebase (probably because we forgot to set a password for the user). It's a
	// useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation map we
	// raise a panic instead.
	if user.Password.hash == nil {
		panic("missing password hash for user")
	}
}

// Define a custom ErrDuplicateEmail error.
var (
	ErrDuplicateEmail = errors.New("duplicate email")
)

// Create a UserModel struct which wraps the connection pool.
type UserModel struct {
	DB *pgxpool.Pool
}

// Insert a new record in the database for the user. Note that the id, created_at and
// version fields are all automatically generated by our database, so we use the
// RETURNING clause to read them into the User struct after the insert, in the same way
// that we did when creating a movie.
func (m UserModel) Insert(user *User, r *http.Request) error {
	query := `INSERT INTO users (first_name, last_name, email, password_hash, activated, phone_number, address, profile_pic) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, version`
	args := []any{user.FirstName, user.LastName, user.Email, user.Password.hash, user.Activated, user.PhoneNumber, user.Address, user.ProfilePic}
	ctx, cancel := context.WithTimeout(r.Context(), 3*time.Second)
	defer cancel()
	// If the table already contains a record with this email address, then when we try
	// to perform the insert there will be a violation of the UNIQUE "users_email_key"
	// constraint that we set up in the previous chapter. We check for this error
	// specifically, and return custom ErrDuplicateEmail error instead.
	err := m.DB.QueryRow(ctx, query, args...).Scan(&user.ID, &user.Version)
	if err != nil {
		switch {
		case err.Error() == `ERROR: duplicate key value violates unique constraint "users_email_key" (SQLSTATE 23505)`:
			return ErrDuplicateEmail
		default:
			return err
		}
	}
	return nil
}

func (m UserModel) GetByEmail(email string, r *http.Request) (*User, error) {
	query := `
SELECT id, first_name, last_name, phone_number, email, password_hash, address, activated, profile_pic, version
FROM users
WHERE email = $1`
	var user User
	ctx, cancel := context.WithTimeout(r.Context(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRow(ctx, query, email).Scan(
		&user.ID,
		&user.FirstName,
		&user.LastName,
		&user.PhoneNumber,
		&user.Email,
		&user.Password.hash,
		&user.Address,
		&user.Activated,
		&user.ProfilePic,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, pgx.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	return &user, nil
}

// Update the details for a specific user. Notice that we check against the version
// field to help prevent any race conditions during the request cycle, just like we did
// when updating a movie. And we also check for a violation of the "users_email_key"
// constraint when performing the update, just like we did when inserting the user
// record originally.
func (m UserModel) Update(user *User, r *http.Request) error {
	query := `
UPDATE users
SET first_name = $1, email = $2, password_hash = $3, activated = $4, version = version + 1, last_name = $5,
    profile_pic = $6, address = $7, phone_number = $8
WHERE id = $9 AND version = $10
RETURNING version`
	args := []any{
		user.FirstName,
		user.Email,
		user.Password.hash,
		user.Activated,
		user.LastName,
		user.ProfilePic,
		user.Address,
		user.PhoneNumber,
		user.ID,
		user.Version,
	}
	ctx, cancel := context.WithTimeout(r.Context(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRow(ctx, query, args...).Scan(&user.Version)
	if err != nil {
		switch {
		case err.Error() == `ERROR: duplicate key value violates unique constraint "users_email_key" (SQLSTATE 23505)`:
			return ErrDuplicateEmail
		case errors.Is(err, pgx.ErrNoRows):
			return ErrEditConflict
		default:
			return err
		}
	}
	return nil
}
func (m UserModel) GetForToken(tokenScope, tokenPlaintext string, r *http.Request) (*User, error) {
	// Calculate the SHA-256 hash of the plaintext token provided by the client.
	// Remember that this returns a byte *array* with length 32, not a slice.
	tokenHash := sha256.Sum256([]byte(tokenPlaintext))
	// Set up the SQL query.
	query := `
SELECT id, first_name, last_name, phone_number, email, password_hash, address, activated, profile_pic, version
FROM users
INNER JOIN tokens
ON users.id = tokens.user_id
WHERE tokens.hash = $1
AND tokens.scope = $2
AND tokens.expiry > $3`
	// Create a slice containing the query arguments. Notice how we use the [:] operator
	// to get a slice containing the token hash, rather than passing in the array (which
	// is not supported by the pq driver), and that we pass the current time as the
	// value to check against the token expiry.
	args := []any{tokenHash[:], tokenScope, time.Now()}
	var user User
	ctx, cancel := context.WithTimeout(r.Context(), 3*time.Second)
	defer cancel()
	// Execute the query, scanning the return values into a User struct. If no matching
	// record is found we return an ErrRecordNotFound error.
	err := m.DB.QueryRow(ctx, query, args...).Scan(
		&user.ID,
		&user.FirstName,
		&user.LastName,
		&user.PhoneNumber,
		&user.Email,
		&user.Password.hash,
		&user.Address,
		&user.Activated,
		&user.ProfilePic,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, pgx.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	// Return the matching user.
	return &user, nil
}

type MockUserModel struct{}

func (m MockUserModel) Insert(user *User, r *http.Request) error {
	return nil
}

func (m MockUserModel) GetByEmail(email string, r *http.Request) (*User, error) {
	return nil, nil
}
func (m MockUserModel) GetForToken(tokenScope, tokenPlaintext string, r *http.Request) (*User, error) {
	return nil, nil
}

func (m MockUserModel) Update(user *User, r *http.Request) error {
	return nil
}

type MockTokenModel struct{}

// New(userID int64, ttl time.Duration, scope string) (*Token, error)
func (m MockTokenModel) New(userID int64, ttl time.Duration, scope string) (*Token, error) {
	return nil, nil
}

func (m MockTokenModel) Insert(token *Token) error {
	return nil
}

func (m MockTokenModel) DeleteAllForUser(scope string, userID int64) error {
	return nil
}
